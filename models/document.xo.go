// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Document represents a row from 'documents'.
type Document struct {
	ID            int    `json:"id"`              // id
	English       string `json:"english"`         // english
	Japanese      string `json:"japanese"`        // japanese
	PartsOfSpeech string `json:"parts_of_speech"` // parts_of_speech
	Text          string `json:"text"`            // text

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Document exists in the database.
func (d *Document) Exists() bool {
	return d._exists
}

// Deleted provides information if the Document has been deleted from the database.
func (d *Document) Deleted() bool {
	return d._deleted
}

// Insert inserts the Document to the database.
func (d *Document) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO documents (` +
		`english, japanese, parts_of_speech, text` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, d.English, d.Japanese, d.PartsOfSpeech, d.Text)
	_, err = db.Exec(sqlstr, d.English, d.Japanese, d.PartsOfSpeech, d.Text)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Document in the database.
func (d *Document) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE documents SET ` +
		`english = $1, japanese = $2, parts_of_speech = $3, text = $4` +
		` WHERE id = $5`

	// run query
	XOLog(sqlstr, d.English, d.Japanese, d.PartsOfSpeech, d.Text, d.ID)
	_, err = db.Exec(sqlstr, d.English, d.Japanese, d.PartsOfSpeech, d.Text, d.ID)
	return err
}

// Save saves the Document to the database.
func (d *Document) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Delete deletes the Document from the database.
func (d *Document) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM documents WHERE id = $1`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// DocumentByID retrieves a row from 'documents' as a Document.
//
// Generated from index 'documents_id_pkey'.
func DocumentByID(db XODB, id int) (*Document, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, english, japanese, parts_of_speech, text ` +
		`FROM documents ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	d := Document{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&d.ID, &d.English, &d.Japanese, &d.PartsOfSpeech, &d.Text)
	if err != nil {
		return nil, err
	}

	return &d, nil
}

func GetDocumentsBySQL(db XODB, query string, args ...interface{}) ([]*Document, error) {
	q, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	var res []*Document

	for q.Next() {
		d := Document{}

		// scan
		err = q.Scan(&d.Text)
		if err != nil {
			return nil, err
		}
		res = append(res, &d)
	}
	return res, nil
}
